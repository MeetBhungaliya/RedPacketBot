"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendCode = exports.initBot = void 0;
const tslib_1 = require("tslib");
const node_persist_1 = tslib_1.__importDefault(require("node-persist"));
const initBot = () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const BOT = global.bot;
    if (!BOT) {
        return global.log.error('Bot not initialized');
    }
    global.log.info('Bot initialised successfully');
    const users = yield node_persist_1.default.get('users');
    const usersSet = new Set(users || []);
    BOT.onText(/\/start/, (msg) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const chatId = msg.chat.id;
        if (usersSet.has(chatId)) {
            BOT.sendMessage(chatId, 'You already there 👋');
        }
        else {
            usersSet.add(chatId);
            yield node_persist_1.default.set('users', Array.from(usersSet));
            BOT.sendMessage(chatId, 'You are in 😍');
        }
    }));
    BOT.onText(/\/stop/, (msg) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const chatId = msg.chat.id;
        if (usersSet.has(chatId)) {
            BOT.sendMessage(chatId, 'You already there 👋');
        }
        else {
            usersSet.delete(chatId);
            yield node_persist_1.default.set('users', Array.from(usersSet));
            BOT.sendMessage(chatId, 'You are out 🥹');
        }
    }));
});
exports.initBot = initBot;
const sendCode = (grabCode) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const BOT = global.bot;
    if (!BOT) {
        global.log.error('Bot not initialized');
        return;
    }
    try {
        const users = yield node_persist_1.default.get('users');
        const codes = yield node_persist_1.default.get('codes');
        if (!Array.isArray(users) || !Array.isArray(codes)) {
            global.log.error('Invalid users or codes data');
            return;
        }
        const usersSet = new Set(users);
        const codesSet = new Set(codes);
        if (codesSet.has(grabCode)) {
            return;
        }
        for (const chatId of usersSet) {
            yield BOT.sendMessage(chatId, grabCode);
        }
        codesSet.add(grabCode);
        yield node_persist_1.default.set('codes', Array.from(codesSet));
    }
    catch (error) {
        global.log.error(`Error sending code: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
});
exports.sendCode = sendCode;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdEJvdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZWxlZ3JhbS9pbml0Qm90LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSx3RUFBa0M7QUFFbEMsTUFBTSxPQUFPLEdBQUcsR0FBUyxFQUFFO0lBQ3pCLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUE7SUFFdEIsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ1QsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO0lBQ2hELENBQUM7SUFFRCxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxDQUFBO0lBRS9DLE1BQU0sS0FBSyxHQUFHLE1BQU0sc0JBQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDeEMsTUFBTSxRQUFRLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFBO0lBRXJDLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQU8sR0FBRyxFQUFFLEVBQUU7UUFDbEMsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUE7UUFFMUIsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7WUFDekIsR0FBRyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsc0JBQXNCLENBQUMsQ0FBQTtRQUNqRCxDQUFDO2FBQU0sQ0FBQztZQUNOLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUE7WUFDcEIsTUFBTSxzQkFBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFBO1lBQ2hELEdBQUcsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLGVBQWUsQ0FBQyxDQUFBO1FBQzFDLENBQUM7SUFDSCxDQUFDLENBQUEsQ0FBQyxDQUFBO0lBRUYsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBTyxHQUFHLEVBQUUsRUFBRTtRQUNqQyxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQTtRQUUxQixJQUFJLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztZQUN6QixHQUFHLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxzQkFBc0IsQ0FBQyxDQUFBO1FBQ2pELENBQUM7YUFBTSxDQUFDO1lBQ04sUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtZQUN2QixNQUFNLHNCQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7WUFDaEQsR0FBRyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQTtRQUMzQyxDQUFDO0lBQ0gsQ0FBQyxDQUFBLENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQSxDQUFBO0FBcUNRLDBCQUFPO0FBbkNoQixNQUFNLFFBQVEsR0FBRyxDQUFPLFFBQWdCLEVBQWlCLEVBQUU7SUFDekQsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQTtJQUV0QixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDVCxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO1FBQ3ZDLE9BQU07SUFDUixDQUFDO0lBRUQsSUFBSSxDQUFDO1FBQ0gsTUFBTSxLQUFLLEdBQXlCLE1BQU0sc0JBQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDOUQsTUFBTSxLQUFLLEdBQXlCLE1BQU0sc0JBQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUE7UUFFOUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDbkQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQTtZQUMvQyxPQUFNO1FBQ1IsQ0FBQztRQUVELE1BQU0sUUFBUSxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQy9CLE1BQU0sUUFBUSxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBRS9CLElBQUksUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1lBQzNCLE9BQU07UUFDUixDQUFDO1FBRUQsS0FBSyxNQUFNLE1BQU0sSUFBSSxRQUFRLEVBQUUsQ0FBQztZQUM5QixNQUFNLEdBQUcsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBQ3pDLENBQUM7UUFFRCxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBRXRCLE1BQU0sc0JBQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQTtJQUNsRCxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNmLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLHVCQUF1QixLQUFLLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFBO0lBQ3JHLENBQUM7QUFDSCxDQUFDLENBQUEsQ0FBQTtBQUNpQiw0QkFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdG9yYWdlIGZyb20gJ25vZGUtcGVyc2lzdCdcblxuY29uc3QgaW5pdEJvdCA9IGFzeW5jICgpID0+IHtcbiAgY29uc3QgQk9UID0gZ2xvYmFsLmJvdFxuXG4gIGlmICghQk9UKSB7XG4gICAgcmV0dXJuIGdsb2JhbC5sb2cuZXJyb3IoJ0JvdCBub3QgaW5pdGlhbGl6ZWQnKVxuICB9XG5cbiAgZ2xvYmFsLmxvZy5pbmZvKCdCb3QgaW5pdGlhbGlzZWQgc3VjY2Vzc2Z1bGx5JylcblxuICBjb25zdCB1c2VycyA9IGF3YWl0IHN0b3JhZ2UuZ2V0KCd1c2VycycpXG4gIGNvbnN0IHVzZXJzU2V0ID0gbmV3IFNldCh1c2VycyB8fCBbXSlcblxuICBCT1Qub25UZXh0KC9cXC9zdGFydC8sIGFzeW5jIChtc2cpID0+IHtcbiAgICBjb25zdCBjaGF0SWQgPSBtc2cuY2hhdC5pZFxuXG4gICAgaWYgKHVzZXJzU2V0LmhhcyhjaGF0SWQpKSB7XG4gICAgICBCT1Quc2VuZE1lc3NhZ2UoY2hhdElkLCAnWW91IGFscmVhZHkgdGhlcmUg8J+RiycpXG4gICAgfSBlbHNlIHtcbiAgICAgIHVzZXJzU2V0LmFkZChjaGF0SWQpXG4gICAgICBhd2FpdCBzdG9yYWdlLnNldCgndXNlcnMnLCBBcnJheS5mcm9tKHVzZXJzU2V0KSlcbiAgICAgIEJPVC5zZW5kTWVzc2FnZShjaGF0SWQsICdZb3UgYXJlIGluIPCfmI0nKVxuICAgIH1cbiAgfSlcblxuICBCT1Qub25UZXh0KC9cXC9zdG9wLywgYXN5bmMgKG1zZykgPT4ge1xuICAgIGNvbnN0IGNoYXRJZCA9IG1zZy5jaGF0LmlkXG5cbiAgICBpZiAodXNlcnNTZXQuaGFzKGNoYXRJZCkpIHtcbiAgICAgIEJPVC5zZW5kTWVzc2FnZShjaGF0SWQsICdZb3UgYWxyZWFkeSB0aGVyZSDwn5GLJylcbiAgICB9IGVsc2Uge1xuICAgICAgdXNlcnNTZXQuZGVsZXRlKGNoYXRJZClcbiAgICAgIGF3YWl0IHN0b3JhZ2Uuc2V0KCd1c2VycycsIEFycmF5LmZyb20odXNlcnNTZXQpKVxuICAgICAgQk9ULnNlbmRNZXNzYWdlKGNoYXRJZCwgJ1lvdSBhcmUgb3V0IPCfpbknKVxuICAgIH1cbiAgfSlcbn1cblxuY29uc3Qgc2VuZENvZGUgPSBhc3luYyAoZ3JhYkNvZGU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4gPT4ge1xuICBjb25zdCBCT1QgPSBnbG9iYWwuYm90XG5cbiAgaWYgKCFCT1QpIHtcbiAgICBnbG9iYWwubG9nLmVycm9yKCdCb3Qgbm90IGluaXRpYWxpemVkJylcbiAgICByZXR1cm5cbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3QgdXNlcnM6IHN0cmluZ1tdIHwgdW5kZWZpbmVkID0gYXdhaXQgc3RvcmFnZS5nZXQoJ3VzZXJzJylcbiAgICBjb25zdCBjb2Rlczogc3RyaW5nW10gfCB1bmRlZmluZWQgPSBhd2FpdCBzdG9yYWdlLmdldCgnY29kZXMnKVxuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHVzZXJzKSB8fCAhQXJyYXkuaXNBcnJheShjb2RlcykpIHtcbiAgICAgIGdsb2JhbC5sb2cuZXJyb3IoJ0ludmFsaWQgdXNlcnMgb3IgY29kZXMgZGF0YScpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCB1c2Vyc1NldCA9IG5ldyBTZXQodXNlcnMpXG4gICAgY29uc3QgY29kZXNTZXQgPSBuZXcgU2V0KGNvZGVzKVxuXG4gICAgaWYgKGNvZGVzU2V0LmhhcyhncmFiQ29kZSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGZvciAoY29uc3QgY2hhdElkIG9mIHVzZXJzU2V0KSB7XG4gICAgICBhd2FpdCBCT1Quc2VuZE1lc3NhZ2UoY2hhdElkLCBncmFiQ29kZSlcbiAgICB9XG5cbiAgICBjb2Rlc1NldC5hZGQoZ3JhYkNvZGUpXG5cbiAgICBhd2FpdCBzdG9yYWdlLnNldCgnY29kZXMnLCBBcnJheS5mcm9tKGNvZGVzU2V0KSlcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBnbG9iYWwubG9nLmVycm9yKGBFcnJvciBzZW5kaW5nIGNvZGU6ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcid9YClcbiAgfVxufVxuZXhwb3J0IHsgaW5pdEJvdCwgc2VuZENvZGUgfVxuIl19